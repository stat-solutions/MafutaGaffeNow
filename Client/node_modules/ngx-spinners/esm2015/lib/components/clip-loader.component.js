/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input } from '@angular/core';
export class ClipLoaderComponent {
    constructor() {
        this.color = 'rgb(54, 215, 183)';
        this.size = 35;
        this.sizeUnit = 'px';
    }
    /**
     * @return {?}
     */
    createClipStyle() {
        return {
            'background': 'transparent !important',
            'width': `${`${this.size}${this.sizeUnit}`}`,
            'height': `${`${this.size}${this.sizeUnit}`}`,
            'border-radius': '100%',
            'border': '2px solid',
            'border-color': `${this.color}`,
            'border-bottom-color': 'transparent',
            'display': 'inline-block',
            'animation': ' loading-clip 0.75s 0s infinite linear',
            'animation-fill-mode': 'both'
        };
    }
}
ClipLoaderComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-clip-loader',
                template: "<div class=\"loader\" [ngStyle]=\"createClipStyle()\"></div>\r\n",
                styles: ["@-webkit-keyframes loading-clip{0%{transform:rotate(0) scale(1)}50%{transform:rotate(180deg) scale(.8)}100%{transform:rotate(360deg) scale(1)}}@keyframes loading-clip{0%{transform:rotate(0) scale(1)}50%{transform:rotate(180deg) scale(.8)}100%{transform:rotate(360deg) scale(1)}}"]
            }] }
];
/** @nocollapse */
ClipLoaderComponent.ctorParameters = () => [];
ClipLoaderComponent.propDecorators = {
    color: [{ type: Input }],
    size: [{ type: Input }],
    sizeUnit: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    ClipLoaderComponent.prototype.color;
    /** @type {?} */
    ClipLoaderComponent.prototype.size;
    /** @type {?} */
    ClipLoaderComponent.prototype.sizeUnit;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xpcC1sb2FkZXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LXNwaW5uZXJzLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvY2xpcC1sb2FkZXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLEtBQUssRUFBQyxNQUFNLGVBQWUsQ0FBQztBQVEvQyxNQUFNLE9BQU8sbUJBQW1CO0lBSzlCO1FBSlMsVUFBSyxHQUFHLG1CQUFtQixDQUFDO1FBQzVCLFNBQUksR0FBRyxFQUFFLENBQUM7UUFDVixhQUFRLEdBQUcsSUFBSSxDQUFDO0lBR3pCLENBQUM7Ozs7SUFFRCxlQUFlO1FBQ2IsT0FBTztZQUNMLFlBQVksRUFBRSx3QkFBd0I7WUFDdEMsT0FBTyxFQUFFLEdBQUcsR0FBRyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxRQUFRLEVBQUUsRUFBRTtZQUM1QyxRQUFRLEVBQUUsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLFFBQVEsRUFBRSxFQUFFO1lBQzdDLGVBQWUsRUFBRSxNQUFNO1lBQ3ZCLFFBQVEsRUFBRSxXQUFXO1lBQ3JCLGNBQWMsRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDL0IscUJBQXFCLEVBQUUsYUFBYTtZQUNwQyxTQUFTLEVBQUUsY0FBYztZQUN6QixXQUFXLEVBQUUsd0NBQXdDO1lBQ3JELHFCQUFxQixFQUFFLE1BQU07U0FDOUIsQ0FBQztJQUNKLENBQUM7OztZQTFCRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLGlCQUFpQjtnQkFDM0IsNEVBQTJDOzthQUU1Qzs7Ozs7b0JBRUUsS0FBSzttQkFDTCxLQUFLO3VCQUNMLEtBQUs7Ozs7SUFGTixvQ0FBcUM7O0lBQ3JDLG1DQUFtQjs7SUFDbkIsdUNBQXlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDb21wb25lbnQsIElucHV0fSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHtEaWN0aW9uYXJ5fSBmcm9tICcuLi9kaWN0aW9uYXJ5JztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAnbmd4LWNsaXAtbG9hZGVyJyxcclxuICB0ZW1wbGF0ZVVybDogJy4vY2xpcC1sb2FkZXIuY29tcG9uZW50Lmh0bWwnLFxyXG4gIHN0eWxlVXJsczogWycuL2NsaXAtbG9hZGVyLmNvbXBvbmVudC5zY3NzJ11cclxufSlcclxuZXhwb3J0IGNsYXNzIENsaXBMb2FkZXJDb21wb25lbnQge1xyXG4gIEBJbnB1dCgpIGNvbG9yID0gJ3JnYig1NCwgMjE1LCAxODMpJztcclxuICBASW5wdXQoKSBzaXplID0gMzU7XHJcbiAgQElucHV0KCkgc2l6ZVVuaXQgPSAncHgnO1xyXG5cclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICB9XHJcblxyXG4gIGNyZWF0ZUNsaXBTdHlsZSgpOiBEaWN0aW9uYXJ5IHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICdiYWNrZ3JvdW5kJzogJ3RyYW5zcGFyZW50ICFpbXBvcnRhbnQnLFxyXG4gICAgICAnd2lkdGgnOiBgJHtgJHt0aGlzLnNpemV9JHt0aGlzLnNpemVVbml0fWB9YCxcclxuICAgICAgJ2hlaWdodCc6IGAke2Ake3RoaXMuc2l6ZX0ke3RoaXMuc2l6ZVVuaXR9YH1gLFxyXG4gICAgICAnYm9yZGVyLXJhZGl1cyc6ICcxMDAlJyxcclxuICAgICAgJ2JvcmRlcic6ICcycHggc29saWQnLFxyXG4gICAgICAnYm9yZGVyLWNvbG9yJzogYCR7dGhpcy5jb2xvcn1gLFxyXG4gICAgICAnYm9yZGVyLWJvdHRvbS1jb2xvcic6ICd0cmFuc3BhcmVudCcsXHJcbiAgICAgICdkaXNwbGF5JzogJ2lubGluZS1ibG9jaycsXHJcbiAgICAgICdhbmltYXRpb24nOiAnIGxvYWRpbmctY2xpcCAwLjc1cyAwcyBpbmZpbml0ZSBsaW5lYXInLFxyXG4gICAgICAnYW5pbWF0aW9uLWZpbGwtbW9kZSc6ICdib3RoJ1xyXG4gICAgfTtcclxuICB9XHJcbn1cclxuIl19