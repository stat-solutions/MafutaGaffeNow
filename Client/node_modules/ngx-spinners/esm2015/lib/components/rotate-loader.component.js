/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, ViewEncapsulation } from '@angular/core';
export class RotateLoaderComponent {
    constructor() {
        this.color = 'rgb(54, 215, 183)';
        this.size = 15;
        this.sizeUnit = 'px';
        this.margin = 2;
        this.marginUnit = 'px';
    }
    /**
     * @return {?}
     */
    createRotateWrapperStyle() {
        return Object.assign({ 'display': 'inline-block' }, this.createBallStyle(), { 'position': 'relative', 'animation-fill-mode': 'both', 'animation': 'loading-rotate 1s 0s infinite cubic-bezier(.7,-.13,.22,.86)' });
    }
    /**
     * @return {?}
     */
    createRotateLongStyle() {
        return Object.assign({}, this.createBallStyle(), this.createPositionStyle(1));
    }
    /**
     * @return {?}
     */
    createRotateShortStyle() {
        return Object.assign({}, this.createBallStyle(), this.createPositionStyle(2));
    }
    /**
     * @private
     * @return {?}
     */
    createBallStyle() {
        return {
            'background-color': `${this.color}`,
            'width': `${`${this.size}${this.sizeUnit}`}`,
            'height': `${`${this.size}${this.sizeUnit}`}`,
            'margin': `${`${this.margin}${this.marginUnit}`}`,
            'border-radius': '100%'
        };
    }
    /**
     * @private
     * @param {?} index
     * @return {?}
     */
    createPositionStyle(index) {
        return {
            'opacity': '0.8',
            'position': 'absolute',
            'top': '0',
            'left': `${index % 2 ? -28 : 25}px`
        };
    }
}
RotateLoaderComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-rotate-loader',
                template: "<div class=\"loader\" [ngStyle]=\"createRotateWrapperStyle()\">\r\n  <div [ngStyle]=\"createRotateLongStyle()\"></div>\r\n  <div [ngStyle]=\"createRotateShortStyle()\"></div>\r\n</div>\r\n",
                encapsulation: ViewEncapsulation.ShadowDom,
                styles: ["@-webkit-keyframes loading-rotate{0%{transform:rotate(0)}50%{transform:rotate(180deg)}100%{transform:rotate(360deg)}}@keyframes loading-rotate{0%{transform:rotate(0)}50%{transform:rotate(180deg)}100%{transform:rotate(360deg)}}"]
            }] }
];
/** @nocollapse */
RotateLoaderComponent.ctorParameters = () => [];
RotateLoaderComponent.propDecorators = {
    color: [{ type: Input }],
    size: [{ type: Input }],
    sizeUnit: [{ type: Input }],
    margin: [{ type: Input }],
    marginUnit: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    RotateLoaderComponent.prototype.color;
    /** @type {?} */
    RotateLoaderComponent.prototype.size;
    /** @type {?} */
    RotateLoaderComponent.prototype.sizeUnit;
    /** @type {?} */
    RotateLoaderComponent.prototype.margin;
    /** @type {?} */
    RotateLoaderComponent.prototype.marginUnit;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm90YXRlLWxvYWRlci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtc3Bpbm5lcnMvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9yb3RhdGUtbG9hZGVyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxLQUFLLEVBQUUsaUJBQWlCLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFTbEUsTUFBTSxPQUFPLHFCQUFxQjtJQU1oQztRQUxTLFVBQUssR0FBRyxtQkFBbUIsQ0FBQztRQUM1QixTQUFJLEdBQUcsRUFBRSxDQUFDO1FBQ1YsYUFBUSxHQUFHLElBQUksQ0FBQztRQUNoQixXQUFNLEdBQUcsQ0FBQyxDQUFDO1FBQ1gsZUFBVSxHQUFHLElBQUksQ0FBQztJQUUzQixDQUFDOzs7O0lBRUQsd0JBQXdCO1FBQ3RCLHVCQUNFLFNBQVMsRUFBRSxjQUFjLElBQ3RCLElBQUksQ0FBQyxlQUFlLEVBQUUsSUFDekIsVUFBVSxFQUFFLFVBQVUsRUFDdEIscUJBQXFCLEVBQUUsTUFBTSxFQUM3QixXQUFXLEVBQUUsNkRBQTZELElBQzFFO0lBQ0osQ0FBQzs7OztJQUVELHFCQUFxQjtRQUNuQix5QkFDSyxJQUFJLENBQUMsZUFBZSxFQUFFLEVBQ3RCLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLENBQUMsRUFDOUI7SUFDSixDQUFDOzs7O0lBRUQsc0JBQXNCO1FBQ3BCLHlCQUNLLElBQUksQ0FBQyxlQUFlLEVBQUUsRUFDdEIsSUFBSSxDQUFDLG1CQUFtQixDQUFDLENBQUMsQ0FBQyxFQUM5QjtJQUNKLENBQUM7Ozs7O0lBRU8sZUFBZTtRQUNuQixPQUFPO1lBQ0wsa0JBQWtCLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ25DLE9BQU8sRUFBRSxHQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsUUFBUSxFQUFFLEVBQUU7WUFDNUMsUUFBUSxFQUFFLEdBQUcsR0FBRyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxRQUFRLEVBQUUsRUFBRTtZQUM3QyxRQUFRLEVBQUUsR0FBRyxHQUFHLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLFVBQVUsRUFBRSxFQUFFO1lBQ2pELGVBQWUsRUFBRSxNQUFNO1NBQ3RCLENBQUM7SUFDUixDQUFDOzs7Ozs7SUFFTyxtQkFBbUIsQ0FBQyxLQUFhO1FBQ3ZDLE9BQU87WUFDTCxTQUFTLEVBQUUsS0FBSztZQUNoQixVQUFVLEVBQUUsVUFBVTtZQUN0QixLQUFLLEVBQUUsR0FBRztZQUNWLE1BQU0sRUFBRSxHQUFHLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUk7U0FDcEMsQ0FBQztJQUNKLENBQUM7OztZQXhERixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLG1CQUFtQjtnQkFDN0Isd01BQTZDO2dCQUU3QyxhQUFhLEVBQUUsaUJBQWlCLENBQUMsU0FBUzs7YUFDM0M7Ozs7O29CQUVFLEtBQUs7bUJBQ0wsS0FBSzt1QkFDTCxLQUFLO3FCQUNMLEtBQUs7eUJBQ0wsS0FBSzs7OztJQUpOLHNDQUFxQzs7SUFDckMscUNBQW1COztJQUNuQix5Q0FBeUI7O0lBQ3pCLHVDQUFvQjs7SUFDcEIsMkNBQTJCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDb21wb25lbnQsIElucHV0LCBWaWV3RW5jYXBzdWxhdGlvbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7RGljdGlvbmFyeX0gZnJvbSAnLi4vZGljdGlvbmFyeSc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ25neC1yb3RhdGUtbG9hZGVyJyxcclxuICB0ZW1wbGF0ZVVybDogJy4vcm90YXRlLWxvYWRlci5jb21wb25lbnQuaHRtbCcsXHJcbiAgc3R5bGVVcmxzOiBbJy4vcm90YXRlLWxvYWRlci5jb21wb25lbnQuc2NzcyddLFxyXG4gIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLlNoYWRvd0RvbVxyXG59KVxyXG5leHBvcnQgY2xhc3MgUm90YXRlTG9hZGVyQ29tcG9uZW50IHtcclxuICBASW5wdXQoKSBjb2xvciA9ICdyZ2IoNTQsIDIxNSwgMTgzKSc7XHJcbiAgQElucHV0KCkgc2l6ZSA9IDE1O1xyXG4gIEBJbnB1dCgpIHNpemVVbml0ID0gJ3B4JztcclxuICBASW5wdXQoKSBtYXJnaW4gPSAyO1xyXG4gIEBJbnB1dCgpIG1hcmdpblVuaXQgPSAncHgnO1xyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gIH1cclxuXHJcbiAgY3JlYXRlUm90YXRlV3JhcHBlclN0eWxlKCk6IERpY3Rpb25hcnkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgJ2Rpc3BsYXknOiAnaW5saW5lLWJsb2NrJyxcclxuICAgICAgLi4udGhpcy5jcmVhdGVCYWxsU3R5bGUoKSxcclxuICAgICAgJ3Bvc2l0aW9uJzogJ3JlbGF0aXZlJyxcclxuICAgICAgJ2FuaW1hdGlvbi1maWxsLW1vZGUnOiAnYm90aCcsXHJcbiAgICAgICdhbmltYXRpb24nOiAnbG9hZGluZy1yb3RhdGUgMXMgMHMgaW5maW5pdGUgY3ViaWMtYmV6aWVyKC43LC0uMTMsLjIyLC44NiknXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgY3JlYXRlUm90YXRlTG9uZ1N0eWxlKCk6IERpY3Rpb25hcnkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgLi4udGhpcy5jcmVhdGVCYWxsU3R5bGUoKSxcclxuICAgICAgLi4udGhpcy5jcmVhdGVQb3NpdGlvblN0eWxlKDEpXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgY3JlYXRlUm90YXRlU2hvcnRTdHlsZSgpOiBEaWN0aW9uYXJ5IHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIC4uLnRoaXMuY3JlYXRlQmFsbFN0eWxlKCksXHJcbiAgICAgIC4uLnRoaXMuY3JlYXRlUG9zaXRpb25TdHlsZSgyKVxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgY3JlYXRlQmFsbFN0eWxlKCk6IERpY3Rpb25hcnkge1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgICdiYWNrZ3JvdW5kLWNvbG9yJzogYCR7dGhpcy5jb2xvcn1gLFxyXG4gICAgICAgICd3aWR0aCc6IGAke2Ake3RoaXMuc2l6ZX0ke3RoaXMuc2l6ZVVuaXR9YH1gLFxyXG4gICAgICAgICdoZWlnaHQnOiBgJHtgJHt0aGlzLnNpemV9JHt0aGlzLnNpemVVbml0fWB9YCxcclxuICAgICAgICAnbWFyZ2luJzogYCR7YCR7dGhpcy5tYXJnaW59JHt0aGlzLm1hcmdpblVuaXR9YH1gLFxyXG4gICAgICAgICdib3JkZXItcmFkaXVzJzogJzEwMCUnXHJcbiAgICAgICAgfTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgY3JlYXRlUG9zaXRpb25TdHlsZShpbmRleDogbnVtYmVyKTogRGljdGlvbmFyeSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAnb3BhY2l0eSc6ICcwLjgnLFxyXG4gICAgICAncG9zaXRpb24nOiAnYWJzb2x1dGUnLFxyXG4gICAgICAndG9wJzogJzAnLFxyXG4gICAgICAnbGVmdCc6IGAke2luZGV4ICUgMiA/IC0yOCA6IDI1fXB4YFxyXG4gICAgfTtcclxuICB9XHJcbn1cclxuIl19