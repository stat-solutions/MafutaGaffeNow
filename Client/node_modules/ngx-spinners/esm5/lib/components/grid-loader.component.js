/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input } from '@angular/core';
var GridLoaderComponent = /** @class */ (function () {
    function GridLoaderComponent() {
        this.color = 'rgb(54, 215, 183)';
        this.size = 15;
        this.sizeUnit = 'px';
        this.margin = 2;
        this.marginUnit = 'px';
    }
    /**
     * @return {?}
     */
    GridLoaderComponent.prototype.createGridWrapperStyle = /**
     * @return {?}
     */
    function () {
        return {
            'width': "" + ("" + ((this.size * 3) + (this.margin * 6)) + this.sizeUnit),
            'font-size': '0'
        };
    };
    /**
     * @param {?} rand
     * @return {?}
     */
    GridLoaderComponent.prototype.createGridStyle = /**
     * @param {?} rand
     * @return {?}
     */
    function (rand) {
        return {
            'display': 'inline-block',
            'background-color': "" + this.color,
            'width': "" + ("" + this.size + this.sizeUnit),
            'height': "" + ("" + this.size + this.sizeUnit),
            'margin': "" + ("" + this.margin + this.marginUnit),
            'border-radius': '100%',
            'animation-fill-mode': 'both',
            'animation': "loading-grid " + ((rand / 100) + 0.6) + "s " + ((rand / 100) - 0.2) + "s infinite ease"
        };
    };
    /**
     * @param {?} top
     * @return {?}
     */
    GridLoaderComponent.prototype.random = /**
     * @param {?} top
     * @return {?}
     */
    function (top) {
        return Math.random() * top;
    };
    GridLoaderComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ngx-grid-loader',
                    template: "<div class=\"loader\" [ngStyle]=\"createGridWrapperStyle()\">\r\n  <div [ngStyle]=\"createGridStyle(random(100))\"></div>\r\n  <div [ngStyle]=\"createGridStyle(random(100))\"></div>\r\n  <div [ngStyle]=\"createGridStyle(random(100))\"></div>\r\n  <div [ngStyle]=\"createGridStyle(random(100))\"></div>\r\n  <div [ngStyle]=\"createGridStyle(random(100))\"></div>\r\n  <div [ngStyle]=\"createGridStyle(random(100))\"></div>\r\n  <div [ngStyle]=\"createGridStyle(random(100))\"></div>\r\n  <div [ngStyle]=\"createGridStyle(random(100))\"></div>\r\n  <div [ngStyle]=\"createGridStyle(random(100))\"></div>\r\n</div>\r\n",
                    styles: ["@-webkit-keyframes loading-grid{0%{transform:scale(1)}50%{transform:scale(.5);opacity:.7}100%{transform:scale(1);opacity:1}}@keyframes loading-grid{0%{transform:scale(1)}50%{transform:scale(.5);opacity:.7}100%{transform:scale(1);opacity:1}}"]
                }] }
    ];
    /** @nocollapse */
    GridLoaderComponent.ctorParameters = function () { return []; };
    GridLoaderComponent.propDecorators = {
        color: [{ type: Input }],
        size: [{ type: Input }],
        sizeUnit: [{ type: Input }],
        margin: [{ type: Input }],
        marginUnit: [{ type: Input }]
    };
    return GridLoaderComponent;
}());
export { GridLoaderComponent };
if (false) {
    /** @type {?} */
    GridLoaderComponent.prototype.color;
    /** @type {?} */
    GridLoaderComponent.prototype.size;
    /** @type {?} */
    GridLoaderComponent.prototype.sizeUnit;
    /** @type {?} */
    GridLoaderComponent.prototype.margin;
    /** @type {?} */
    GridLoaderComponent.prototype.marginUnit;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JpZC1sb2FkZXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LXNwaW5uZXJzLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvZ3JpZC1sb2FkZXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLEtBQUssRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUcvQztJQVlFO1FBTlMsVUFBSyxHQUFHLG1CQUFtQixDQUFDO1FBQzVCLFNBQUksR0FBRyxFQUFFLENBQUM7UUFDVixhQUFRLEdBQUcsSUFBSSxDQUFDO1FBQ2hCLFdBQU0sR0FBRyxDQUFDLENBQUM7UUFDWCxlQUFVLEdBQUcsSUFBSSxDQUFDO0lBRzNCLENBQUM7Ozs7SUFFRCxvREFBc0I7OztJQUF0QjtRQUNFLE9BQU87WUFDTCxPQUFPLEVBQUUsTUFBRyxNQUFHLENBQUMsSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLElBQUcsSUFBSSxDQUFDLFFBQVUsQ0FBRTtZQUN0RSxXQUFXLEVBQUUsR0FBRztTQUNqQixDQUFDO0lBQ0osQ0FBQzs7Ozs7SUFFRCw2Q0FBZTs7OztJQUFmLFVBQWdCLElBQVk7UUFDMUIsT0FBTztZQUNMLFNBQVMsRUFBRSxjQUFjO1lBQ3pCLGtCQUFrQixFQUFFLEtBQUcsSUFBSSxDQUFDLEtBQU87WUFDbkMsT0FBTyxFQUFFLE1BQUcsS0FBRyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxRQUFVLENBQUU7WUFDNUMsUUFBUSxFQUFFLE1BQUcsS0FBRyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxRQUFVLENBQUU7WUFDN0MsUUFBUSxFQUFFLE1BQUcsS0FBRyxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxVQUFZLENBQUU7WUFDakQsZUFBZSxFQUFFLE1BQU07WUFDdkIscUJBQXFCLEVBQUUsTUFBTTtZQUM3QixXQUFXLEVBQUUsbUJBQWdCLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsWUFBSyxDQUFDLElBQUksR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLHFCQUFpQjtTQUN4RixDQUFDO0lBQ0osQ0FBQzs7Ozs7SUFFRCxvQ0FBTTs7OztJQUFOLFVBQU8sR0FBVztRQUNoQixPQUFPLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxHQUFHLENBQUM7SUFDN0IsQ0FBQzs7Z0JBckNGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsaUJBQWlCO29CQUMzQixtbkJBQTJDOztpQkFFNUM7Ozs7O3dCQUVFLEtBQUs7dUJBQ0wsS0FBSzsyQkFDTCxLQUFLO3lCQUNMLEtBQUs7NkJBQ0wsS0FBSzs7SUE0QlIsMEJBQUM7Q0FBQSxBQXRDRCxJQXNDQztTQWpDWSxtQkFBbUI7OztJQUM5QixvQ0FBcUM7O0lBQ3JDLG1DQUFtQjs7SUFDbkIsdUNBQXlCOztJQUN6QixxQ0FBb0I7O0lBQ3BCLHlDQUEyQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q29tcG9uZW50LCBJbnB1dH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7RGljdGlvbmFyeX0gZnJvbSAnLi4vZGljdGlvbmFyeSc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ25neC1ncmlkLWxvYWRlcicsXHJcbiAgdGVtcGxhdGVVcmw6ICcuL2dyaWQtbG9hZGVyLmNvbXBvbmVudC5odG1sJyxcclxuICBzdHlsZVVybHM6IFsnLi9ncmlkLWxvYWRlci5jb21wb25lbnQuc2NzcyddXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBHcmlkTG9hZGVyQ29tcG9uZW50IHtcclxuICBASW5wdXQoKSBjb2xvciA9ICdyZ2IoNTQsIDIxNSwgMTgzKSc7XHJcbiAgQElucHV0KCkgc2l6ZSA9IDE1O1xyXG4gIEBJbnB1dCgpIHNpemVVbml0ID0gJ3B4JztcclxuICBASW5wdXQoKSBtYXJnaW4gPSAyO1xyXG4gIEBJbnB1dCgpIG1hcmdpblVuaXQgPSAncHgnO1xyXG5cclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICB9XHJcblxyXG4gIGNyZWF0ZUdyaWRXcmFwcGVyU3R5bGUoKTogRGljdGlvbmFyeSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAnd2lkdGgnOiBgJHtgJHsodGhpcy5zaXplICogMykgKyAodGhpcy5tYXJnaW4gKiA2KX0ke3RoaXMuc2l6ZVVuaXR9YH1gLFxyXG4gICAgICAnZm9udC1zaXplJzogJzAnXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgY3JlYXRlR3JpZFN0eWxlKHJhbmQ6IG51bWJlcik6IERpY3Rpb25hcnkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgJ2Rpc3BsYXknOiAnaW5saW5lLWJsb2NrJyxcclxuICAgICAgJ2JhY2tncm91bmQtY29sb3InOiBgJHt0aGlzLmNvbG9yfWAsXHJcbiAgICAgICd3aWR0aCc6IGAke2Ake3RoaXMuc2l6ZX0ke3RoaXMuc2l6ZVVuaXR9YH1gLFxyXG4gICAgICAnaGVpZ2h0JzogYCR7YCR7dGhpcy5zaXplfSR7dGhpcy5zaXplVW5pdH1gfWAsXHJcbiAgICAgICdtYXJnaW4nOiBgJHtgJHt0aGlzLm1hcmdpbn0ke3RoaXMubWFyZ2luVW5pdH1gfWAsXHJcbiAgICAgICdib3JkZXItcmFkaXVzJzogJzEwMCUnLFxyXG4gICAgICAnYW5pbWF0aW9uLWZpbGwtbW9kZSc6ICdib3RoJyxcclxuICAgICAgJ2FuaW1hdGlvbic6IGBsb2FkaW5nLWdyaWQgJHsocmFuZCAvIDEwMCkgKyAwLjZ9cyAkeyhyYW5kIC8gMTAwKSAtIDAuMn1zIGluZmluaXRlIGVhc2VgXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgcmFuZG9tKHRvcDogbnVtYmVyKSB7XHJcbiAgICByZXR1cm4gTWF0aC5yYW5kb20oKSAqIHRvcDtcclxuICB9XHJcbn1cclxuIl19