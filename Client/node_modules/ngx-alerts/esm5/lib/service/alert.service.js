/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Inject, Injectable } from '@angular/core';
import { BehaviorSubject, Subject, timer } from 'rxjs';
import { ALERT_CONFIG } from '../alert.config';
import { scan, take } from 'rxjs/internal/operators';
import { AlertReducer } from './alert.reducer';
var AlertService = /** @class */ (function () {
    function AlertService(config) {
        this.config = config;
        this.dispatcher = new Subject();
        this.state = new BehaviorSubject([]);
        this.initConfig();
        this.dispatcher
            .pipe(scan(AlertReducer.reduce, []))
            .subscribe(this.state);
    }
    /**
     * @private
     * @return {?}
     */
    AlertService.prototype.initConfig = /**
     * @private
     * @return {?}
     */
    function () {
        if (!this.config) {
            this.config = {};
        }
        this.config.timeout = !!this.config.timeout ? this.config.timeout : 5000;
        this.config.maxMessages = !!this.config.maxMessages ? this.config.maxMessages : 5;
    };
    Object.defineProperty(AlertService.prototype, "messages", {
        get: /**
         * @return {?}
         */
        function () {
            return this.state.asObservable();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} msg
     * @return {?}
     */
    AlertService.prototype.info = /**
     * @param {?} msg
     * @return {?}
     */
    function (msg) {
        this.addAlert({ content: msg, type: 'info' });
    };
    /**
     * @param {?} msg
     * @return {?}
     */
    AlertService.prototype.danger = /**
     * @param {?} msg
     * @return {?}
     */
    function (msg) {
        this.addAlert({ content: msg, type: 'danger' });
    };
    /**
     * @param {?} msg
     * @return {?}
     */
    AlertService.prototype.success = /**
     * @param {?} msg
     * @return {?}
     */
    function (msg) {
        this.addAlert({ content: msg, type: 'success' });
    };
    /**
     * @param {?} msg
     * @return {?}
     */
    AlertService.prototype.warning = /**
     * @param {?} msg
     * @return {?}
     */
    function (msg) {
        this.addAlert({ content: msg, type: 'warning' });
    };
    /**
     * @param {?} alert
     * @return {?}
     */
    AlertService.prototype.close = /**
     * @param {?} alert
     * @return {?}
     */
    function (alert) {
        this.dispatcher.next({ fn: AlertReducer.remove, alert: alert, config: this.config });
    };
    /**
     * @private
     * @param {?} alert
     * @return {?}
     */
    AlertService.prototype.addAlert = /**
     * @private
     * @param {?} alert
     * @return {?}
     */
    function (alert) {
        var _this = this;
        this.dispatcher.next({ fn: AlertReducer.add, alert: alert, config: this.config });
        if (this.config.timeout > 0) {
            timer(this.config.timeout)
                .pipe(take(1))
                .subscribe((/**
             * @return {?}
             */
            function () {
                _this.dispatcher.next({ fn: AlertReducer.remove, alert: alert, config: _this.config });
            }));
        }
    };
    AlertService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    AlertService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [ALERT_CONFIG,] }] }
    ]; };
    return AlertService;
}());
export { AlertService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    AlertService.prototype.dispatcher;
    /**
     * @type {?}
     * @private
     */
    AlertService.prototype.state;
    /**
     * @type {?}
     * @private
     */
    AlertService.prototype.config;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWxlcnQuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1hbGVydHMvIiwic291cmNlcyI6WyJsaWIvc2VydmljZS9hbGVydC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUMsTUFBTSxFQUFFLFVBQVUsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUVqRCxPQUFPLEVBQUMsZUFBZSxFQUFjLE9BQU8sRUFBRSxLQUFLLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFDakUsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLGlCQUFpQixDQUFDO0FBRTdDLE9BQU8sRUFBQyxJQUFJLEVBQUUsSUFBSSxFQUFDLE1BQU0seUJBQXlCLENBQUM7QUFDbkQsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLGlCQUFpQixDQUFDO0FBRTdDO0lBTUUsc0JBQTBDLE1BQW1CO1FBQW5CLFdBQU0sR0FBTixNQUFNLENBQWE7UUFIckQsZUFBVSxHQUFHLElBQUksT0FBTyxFQUF1RCxDQUFDO1FBQ2hGLFVBQUssR0FBRyxJQUFJLGVBQWUsQ0FBVSxFQUFFLENBQUMsQ0FBQztRQUcvQyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDbEIsSUFBSSxDQUFDLFVBQVU7YUFDWixJQUFJLENBQ0gsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLENBQzlCO2FBQ0EsU0FBUyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMzQixDQUFDOzs7OztJQUVPLGlDQUFVOzs7O0lBQWxCO1FBQ0UsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDaEIsSUFBSSxDQUFDLE1BQU0sR0FBRyxFQUFFLENBQUM7U0FDbEI7UUFDRCxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFDekUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3BGLENBQUM7SUFFRCxzQkFBVyxrQ0FBUTs7OztRQUFuQjtZQUNFLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUNuQyxDQUFDOzs7T0FBQTs7Ozs7SUFFTSwyQkFBSTs7OztJQUFYLFVBQVksR0FBOEI7UUFDeEMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFDLE9BQU8sRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBQyxDQUFDLENBQUM7SUFDOUMsQ0FBQzs7Ozs7SUFFTSw2QkFBTTs7OztJQUFiLFVBQWMsR0FBOEI7UUFDMUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFDLE9BQU8sRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBQyxDQUFDLENBQUM7SUFDaEQsQ0FBQzs7Ozs7SUFFTSw4QkFBTzs7OztJQUFkLFVBQWUsR0FBOEI7UUFDM0MsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFDLE9BQU8sRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBQyxDQUFDLENBQUM7SUFDakQsQ0FBQzs7Ozs7SUFFTSw4QkFBTzs7OztJQUFkLFVBQWUsR0FBOEI7UUFDM0MsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFDLE9BQU8sRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBQyxDQUFDLENBQUM7SUFDakQsQ0FBQzs7Ozs7SUFFTSw0QkFBSzs7OztJQUFaLFVBQWEsS0FBWTtRQUN2QixJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxFQUFDLEVBQUUsRUFBRSxZQUFZLENBQUMsTUFBTSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUMsQ0FBQyxDQUFDO0lBQ3JGLENBQUM7Ozs7OztJQUVPLCtCQUFROzs7OztJQUFoQixVQUFpQixLQUFZO1FBQTdCLGlCQVVDO1FBVEMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsRUFBQyxFQUFFLEVBQUUsWUFBWSxDQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTSxFQUFDLENBQUMsQ0FBQztRQUVoRixJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxHQUFHLENBQUMsRUFBRTtZQUMzQixLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUM7aUJBQ3ZCLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7aUJBQ2IsU0FBUzs7O1lBQUM7Z0JBQ1QsS0FBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsRUFBQyxFQUFFLEVBQUUsWUFBWSxDQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxLQUFJLENBQUMsTUFBTSxFQUFDLENBQUMsQ0FBQztZQUNyRixDQUFDLEVBQUMsQ0FBQztTQUNOO0lBQ0gsQ0FBQzs7Z0JBekRGLFVBQVU7Ozs7Z0RBTUksTUFBTSxTQUFDLFlBQVk7O0lBb0RsQyxtQkFBQztDQUFBLEFBMURELElBMERDO1NBekRZLFlBQVk7Ozs7OztJQUV2QixrQ0FBd0Y7Ozs7O0lBQ3hGLDZCQUFpRDs7Ozs7SUFFckMsOEJBQWlEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJbmplY3QsIEluamVjdGFibGV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtBbGVydH0gZnJvbSAnLi4vbW9kZWwvYWxlcnQubW9kZWwnO1xuaW1wb3J0IHtCZWhhdmlvclN1YmplY3QsIE9ic2VydmFibGUsIFN1YmplY3QsIHRpbWVyfSBmcm9tICdyeGpzJztcbmltcG9ydCB7QUxFUlRfQ09ORklHfSBmcm9tICcuLi9hbGVydC5jb25maWcnO1xuaW1wb3J0IHtBbGVydENvbmZpZ30gZnJvbSAnLi4vbW9kZWwvYWxlcnQtY29uZmlnLm1vZGVsJztcbmltcG9ydCB7c2NhbiwgdGFrZX0gZnJvbSAncnhqcy9pbnRlcm5hbC9vcGVyYXRvcnMnO1xuaW1wb3J0IHtBbGVydFJlZHVjZXJ9IGZyb20gJy4vYWxlcnQucmVkdWNlcic7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBBbGVydFNlcnZpY2Uge1xuXG4gIHByaXZhdGUgZGlzcGF0Y2hlciA9IG5ldyBTdWJqZWN0PHsgZm46IEZ1bmN0aW9uLCBhbGVydDogQWxlcnQsIGNvbmZpZzogQWxlcnRDb25maWcgfT4oKTtcbiAgcHJpdmF0ZSBzdGF0ZSA9IG5ldyBCZWhhdmlvclN1YmplY3Q8QWxlcnRbXT4oW10pO1xuXG4gIGNvbnN0cnVjdG9yKEBJbmplY3QoQUxFUlRfQ09ORklHKSBwcml2YXRlIGNvbmZpZzogQWxlcnRDb25maWcpIHtcbiAgICB0aGlzLmluaXRDb25maWcoKTtcbiAgICB0aGlzLmRpc3BhdGNoZXJcbiAgICAgIC5waXBlKFxuICAgICAgICBzY2FuKEFsZXJ0UmVkdWNlci5yZWR1Y2UsIFtdKVxuICAgICAgKVxuICAgICAgLnN1YnNjcmliZSh0aGlzLnN0YXRlKTtcbiAgfVxuXG4gIHByaXZhdGUgaW5pdENvbmZpZygpOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMuY29uZmlnKSB7XG4gICAgICB0aGlzLmNvbmZpZyA9IHt9O1xuICAgIH1cbiAgICB0aGlzLmNvbmZpZy50aW1lb3V0ID0gISF0aGlzLmNvbmZpZy50aW1lb3V0ID8gdGhpcy5jb25maWcudGltZW91dCA6IDUwMDA7XG4gICAgdGhpcy5jb25maWcubWF4TWVzc2FnZXMgPSAhIXRoaXMuY29uZmlnLm1heE1lc3NhZ2VzID8gdGhpcy5jb25maWcubWF4TWVzc2FnZXMgOiA1O1xuICB9XG5cbiAgcHVibGljIGdldCBtZXNzYWdlcygpOiBPYnNlcnZhYmxlPEFsZXJ0W10+IHtcbiAgICByZXR1cm4gdGhpcy5zdGF0ZS5hc09ic2VydmFibGUoKTtcbiAgfVxuXG4gIHB1YmxpYyBpbmZvKG1zZzogc3RyaW5nIHwgeyBodG1sOiBzdHJpbmcgfSk6IHZvaWQge1xuICAgIHRoaXMuYWRkQWxlcnQoe2NvbnRlbnQ6IG1zZywgdHlwZTogJ2luZm8nfSk7XG4gIH1cblxuICBwdWJsaWMgZGFuZ2VyKG1zZzogc3RyaW5nIHwgeyBodG1sOiBzdHJpbmcgfSk6IHZvaWQge1xuICAgIHRoaXMuYWRkQWxlcnQoe2NvbnRlbnQ6IG1zZywgdHlwZTogJ2Rhbmdlcid9KTtcbiAgfVxuXG4gIHB1YmxpYyBzdWNjZXNzKG1zZzogc3RyaW5nIHwgeyBodG1sOiBzdHJpbmcgfSk6IHZvaWQge1xuICAgIHRoaXMuYWRkQWxlcnQoe2NvbnRlbnQ6IG1zZywgdHlwZTogJ3N1Y2Nlc3MnfSk7XG4gIH1cblxuICBwdWJsaWMgd2FybmluZyhtc2c6IHN0cmluZyB8IHsgaHRtbDogc3RyaW5nIH0pOiB2b2lkIHtcbiAgICB0aGlzLmFkZEFsZXJ0KHtjb250ZW50OiBtc2csIHR5cGU6ICd3YXJuaW5nJ30pO1xuICB9XG5cbiAgcHVibGljIGNsb3NlKGFsZXJ0OiBBbGVydCk6IHZvaWQge1xuICAgIHRoaXMuZGlzcGF0Y2hlci5uZXh0KHtmbjogQWxlcnRSZWR1Y2VyLnJlbW92ZSwgYWxlcnQ6IGFsZXJ0LCBjb25maWc6IHRoaXMuY29uZmlnfSk7XG4gIH1cblxuICBwcml2YXRlIGFkZEFsZXJ0KGFsZXJ0OiBBbGVydCk6IHZvaWQge1xuICAgIHRoaXMuZGlzcGF0Y2hlci5uZXh0KHtmbjogQWxlcnRSZWR1Y2VyLmFkZCwgYWxlcnQ6IGFsZXJ0LCBjb25maWc6IHRoaXMuY29uZmlnfSk7XG5cbiAgICBpZiAodGhpcy5jb25maWcudGltZW91dCA+IDApIHtcbiAgICAgIHRpbWVyKHRoaXMuY29uZmlnLnRpbWVvdXQpXG4gICAgICAgIC5waXBlKHRha2UoMSkpXG4gICAgICAgIC5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgICAgIHRoaXMuZGlzcGF0Y2hlci5uZXh0KHtmbjogQWxlcnRSZWR1Y2VyLnJlbW92ZSwgYWxlcnQ6IGFsZXJ0LCBjb25maWc6IHRoaXMuY29uZmlnfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgfVxufVxuIl19